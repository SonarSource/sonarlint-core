/*
 * SonarLint Core - Medium Tests
 * Copyright (C) 2016-2023 SonarSource SA
 * mailto:info AT sonarsource DOT com
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
package mediumtest.taint.vulnerabilities;

import java.nio.file.Paths;
import java.time.Duration;
import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;
import java.util.concurrent.ExecutionException;
import mediumtest.fixtures.ServerFixture;
import mediumtest.fixtures.SonarLintTestRpcServer;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.RegisterExtension;
import org.sonarsource.sonarlint.core.commons.IssueSeverity;
import org.sonarsource.sonarlint.core.commons.RuleType;
import org.sonarsource.sonarlint.core.commons.log.SonarLintLogTester;
import org.sonarsource.sonarlint.core.rpc.protocol.backend.issue.ChangeIssueStatusParams;
import org.sonarsource.sonarlint.core.rpc.protocol.backend.issue.ResolutionStatus;
import org.sonarsource.sonarlint.core.rpc.protocol.backend.tracking.TaintVulnerabilityDto;
import org.sonarsource.sonarlint.core.rpc.protocol.backend.tracking.TextRangeWithHashDto;
import org.sonarsource.sonarlint.core.rpc.protocol.client.taint.vulnerability.DidChangeTaintVulnerabilitiesParams;
import org.sonarsource.sonarlint.core.rpc.protocol.common.CleanCodeAttribute;
import org.sonarsource.sonarlint.core.rpc.protocol.common.ImpactSeverity;
import org.sonarsource.sonarlint.core.rpc.protocol.common.SoftwareQuality;
import org.sonarsource.sonarlint.core.serverconnection.issues.ServerTaintIssue;

import static com.github.tomakehurst.wiremock.client.WireMock.get;
import static com.github.tomakehurst.wiremock.client.WireMock.notFound;
import static com.github.tomakehurst.wiremock.client.WireMock.okForContentType;
import static com.github.tomakehurst.wiremock.stubbing.Scenario.STARTED;
import static mediumtest.fixtures.ServerFixture.newSonarQubeServer;
import static mediumtest.fixtures.SonarLintBackendFixture.newBackend;
import static mediumtest.fixtures.SonarLintBackendFixture.newFakeClient;
import static mediumtest.fixtures.storage.ServerTaintIssueFixtures.aServerTaintIssue;
import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.tuple;
import static org.awaitility.Awaitility.await;
import static org.sonarsource.sonarlint.core.rpc.protocol.common.Language.JAVA;

class TaintVulnerabilityEventsMediumTests {

  @RegisterExtension
  static SonarLintLogTester logTester = new SonarLintLogTester();

  private SonarLintTestRpcServer backend;
  private ServerFixture.Server server;

  @AfterEach
  void tearDown() throws ExecutionException, InterruptedException {
    backend.shutdown().get();
    server.shutdown();
  }

  @Nested
  class WhenReceivingTaintRaisedEvent {
    private final String eventPayload = "event: TaintVulnerabilityRaised\n" +
      "data: {" +
      "    \"key\": \"taintKey\"," +
      "    \"projectKey\": \"projectKey\"," +
      "    \"branch\": \"branchName\"," +
      "    \"creationDate\": 123456789," +
      "    \"ruleKey\": \"javasecurity:S123\"," +
      "    \"severity\": \"MAJOR\"," +
      "    \"type\": \"VULNERABILITY\"," +
      "    \"mainLocation\": {" +
      "      \"filePath\": \"functions/taint.js\"," +
      "      \"message\": \"blah blah\"," +
      "      \"textRange\": {" +
      "        \"startLine\": 17," +
      "        \"startLineOffset\": 10," +
      "        \"endLine\": 3," +
      "        \"endLineOffset\": 2," +
      "        \"hash\": \"hash\"" +
      "      }" +
      "    }," +
      "    \"flows\": [" +
      "      {" +
      "        \"locations\": [" +
      "          {" +
      "            \"filePath\": \"functions/taint.js\"," +
      "            \"message\": \"sink: tainted value is used to perform a security-sensitive operation\"," +
      "            \"textRange\": {" +
      "              \"startLine\": 17," +
      "              \"startLineOffset\": 10," +
      "              \"endLine\": 3," +
      "              \"endLineOffset\": 2," +
      "              \"hash\": \"hash1\"" +
      "            }" +
      "          }," +
      "          {" +
      "            \"filePath\": \"functions/taint2.js\"," +
      "            \"message\": \"sink: tainted value is used to perform a security-sensitive operation\"," +
      "            \"textRange\": {" +
      "              \"startLine\": 18," +
      "              \"startLineOffset\": 11," +
      "              \"endLine\": 4," +
      "              \"endLineOffset\": 3," +
      "              \"hash\": \"hash2\"" +
      "            }" +
      "          }" +
      "        ]" +
      "      }" +
      "    ]" +
      "}\n\n";

    @Test
    void it_should_store_taint_vulnerability_in_storage() {
      server = newSonarQubeServer("10.0")
        .withProject("projectKey",
          project -> project.withBranch("branchName"))
        .start();
      mockEvent(server, "projectKey", eventPayload);
      backend = newBackend()
        .withExtraEnabledLanguagesInConnectedMode(JAVA)
        .withServerSentEventsEnabled()
        .withSonarQubeConnection("connectionId", server)
        .withBoundConfigScope("configScope", "connectionId", "projectKey")
        .build();

      await().atMost(Duration.ofSeconds(2)).untilAsserted(() -> assertThat(readTaintVulnerabilities("connectionId", "projectKey", "branchName"))
        .extracting(ServerTaintIssue::getSonarServerKey)
        .containsOnly("taintKey"));
    }

    @Test
    void it_should_notify_client() {
      server = newSonarQubeServer("10.0")
        .withProject("projectKey",
          project -> project.withBranch("branchName"))
        .start();
      mockEvent(server, "projectKey", eventPayload);
      var client = newFakeClient().build();
      backend = newBackend()
        .withExtraEnabledLanguagesInConnectedMode(JAVA)
        .withServerSentEventsEnabled()
        .withSonarQubeConnection("connectionId", server)
        .withBoundConfigScope("configScope", "connectionId", "projectKey")
        .withFullSynchronization()
        .build(client);

      await().atMost(Duration.ofSeconds(2)).untilAsserted(() -> assertThat(client.getTaintVulnerabilityChanges())
        .usingRecursiveComparison()
        .ignoringFields("addedTaintVulnerabilities.id")
        .isEqualTo(List.of(new DidChangeTaintVulnerabilitiesParams("configScope", Set.of(),
          List
            .of(new TaintVulnerabilityDto(UUID.randomUUID(), "taintKey", false, "javasecurity:S123", "blah blah", Paths.get("functions/taint.js"), Instant.ofEpochMilli(123456789),
              org.sonarsource.sonarlint.core.rpc.protocol.common.IssueSeverity.MAJOR, org.sonarsource.sonarlint.core.rpc.protocol.common.RuleType.VULNERABILITY,
              List.of(new TaintVulnerabilityDto.FlowDto(List.of(
                new TaintVulnerabilityDto.FlowDto.LocationDto(new TextRangeWithHashDto(17, 10, 3, 2, "hash1"),
                  "sink: tainted value is used to perform a security-sensitive operation",
                  Paths.get("functions/taint.js")),
                new TaintVulnerabilityDto.FlowDto.LocationDto(new TextRangeWithHashDto(18, 11, 4, 3, "hash2"),
                  "sink: tainted value is used to perform a security-sensitive operation", Paths.get("functions/taint2.js"))))),
              new TextRangeWithHashDto(17, 10, 3, 2, "hash"), null, null, Map.of(),
              true)),
          List.of()))));
    }
  }

  @Nested
  class WhenReceivingIssueChangedEvent {
    @Test
    void it_should_update_taint_vulnerability_in_storage_with_new_resolution() {
      server = newSonarQubeServer("10.0")
        .withProject("projectKey",
          project -> project.withBranch("branchName"))
        .start();
      mockEvent(server, "projectKey", "event: IssueChanged\n" +
        "data: {" +
        "\"projectKey\": \"projectKey\"," +
        "\"issues\": [{" +
        "  \"issueKey\": \"key1\"," +
        "  \"branchName\": \"branchName\"" +
        "}]," +
        "\"resolved\": true" +
        "}\n\n");
      backend = newBackend()
        .withExtraEnabledLanguagesInConnectedMode(JAVA)
        .withServerSentEventsEnabled()
        .withSonarQubeConnection("connectionId", server,
          storage -> storage.withProject("projectKey", project -> project.withMainBranch("branchName", branch -> branch.withTaintIssue(aServerTaintIssue("key1").open()))))
        .withBoundConfigScope("configScope", "connectionId", "projectKey")
        .build();

      await().atMost(Duration.ofSeconds(2)).untilAsserted(() -> assertThat(readTaintVulnerabilities("connectionId", "projectKey", "branchName"))
        .extracting(ServerTaintIssue::getSonarServerKey, ServerTaintIssue::isResolved)
        .containsOnly(tuple("key1", true)));
    }

    @Test
    void it_should_update_taint_vulnerability_in_storage_with_new_severity() {
      server = newSonarQubeServer("10.0")
        .withProject("projectKey",
          project -> project.withBranch("branchName"))
        .start();
      mockEvent(server, "projectKey", "event: IssueChanged\n" +
        "data: {" +
        "\"projectKey\": \"projectKey\"," +
        "\"issues\": [{" +
        "  \"issueKey\": \"key1\"," +
        "  \"branchName\": \"branchName\"" +
        "}]," +
        "\"userSeverity\": \"CRITICAL\"" +
        "}\n\n");
      backend = newBackend()
        .withExtraEnabledLanguagesInConnectedMode(JAVA)
        .withServerSentEventsEnabled()
        .withSonarQubeConnection("connectionId", server,
          storage -> storage.withProject("projectKey",
            project -> project.withMainBranch("branchName", branch -> branch.withTaintIssue(aServerTaintIssue("key1").withSeverity(IssueSeverity.INFO)))))
        .withBoundConfigScope("configScope", "connectionId", "projectKey")
        .build();

      await().atMost(Duration.ofSeconds(2)).untilAsserted(() -> assertThat(readTaintVulnerabilities("connectionId", "projectKey", "branchName"))
        .extracting(ServerTaintIssue::getSonarServerKey, ServerTaintIssue::getSeverity)
        .containsOnly(tuple("key1", IssueSeverity.CRITICAL)));
    }

    @Test
    void it_should_update_taint_vulnerability_in_storage_with_new_type() {
      server = newSonarQubeServer("10.0")
        .withProject("projectKey",
          project -> project.withBranch("branchName"))
        .start();
      mockEvent(server, "projectKey", "event: IssueChanged\n" +
        "data: {" +
        "\"projectKey\": \"projectKey\"," +
        "\"issues\": [{" +
        "  \"issueKey\": \"key1\"," +
        "  \"branchName\": \"branchName\"" +
        "}]," +
        "\"userType\": \"BUG\"" +
        "}\n\n");
      backend = newBackend()
        .withExtraEnabledLanguagesInConnectedMode(JAVA)
        .withServerSentEventsEnabled()
        .withSonarQubeConnection("connectionId", server,
          storage -> storage.withProject("projectKey",
            project -> project.withMainBranch("branchName", branch -> branch.withTaintIssue(aServerTaintIssue("key1").withType(RuleType.VULNERABILITY)))))
        .withBoundConfigScope("configScope", "connectionId", "projectKey")
        .build();

      await().atMost(Duration.ofSeconds(2)).untilAsserted(() -> assertThat(readTaintVulnerabilities("connectionId", "projectKey", "branchName"))
        .extracting(ServerTaintIssue::getSonarServerKey, ServerTaintIssue::getType)
        .containsOnly(tuple("key1", RuleType.BUG)));
    }

    @Test
    void it_should_notify_client() {
      server = newSonarQubeServer("10.0")
        .withProject("projectKey",
          project -> project.withBranch("branchName"))
        .start();
      mockEvent(server, "projectKey", "event: IssueChanged\n" +
        "data: {" +
        "\"projectKey\": \"projectKey\"," +
        "\"issues\": [{" +
        "  \"issueKey\": \"key1\"," +
        "  \"branchName\": \"branchName\"" +
        "}]," +
        "\"userSeverity\": \"CRITICAL\"" +
        "}\n\n");
      var client = newFakeClient().build();
      var introductionDate = Instant.now().truncatedTo(ChronoUnit.SECONDS);
      backend = newBackend()
        .withExtraEnabledLanguagesInConnectedMode(JAVA)
        .withServerSentEventsEnabled()
        .withSonarQubeConnection("connectionId", server,
          storage -> storage.withProject("projectKey",
            project -> project.withMainBranch("branchName",
              branch -> branch.withTaintIssue(aServerTaintIssue("key1").withIntroductionDate(introductionDate).withSeverity(IssueSeverity.MINOR)))))
        .withBoundConfigScope("configScope", "connectionId", "projectKey")
        .withFullSynchronization()
        .build(client);
      var storedTaintIssues = await().atMost(Duration.ofSeconds(2)).until(() -> readTaintVulnerabilities("connectionId", "projectKey", "branchName"), taints -> taints.size() == 1);

      await().atMost(Duration.ofSeconds(2)).untilAsserted(() -> assertThat(client.getTaintVulnerabilityChanges())
        .usingRecursiveComparison()
        .isEqualTo(List.of(new DidChangeTaintVulnerabilitiesParams("configScope", Set.of(), List.of(),
          List.of(new TaintVulnerabilityDto(storedTaintIssues.get(0).getId(), "key1", false, "ruleKey", "message", Paths.get("file/path"), introductionDate,
            org.sonarsource.sonarlint.core.rpc.protocol.common.IssueSeverity.CRITICAL, org.sonarsource.sonarlint.core.rpc.protocol.common.RuleType.BUG, List.of(),
            new TextRangeWithHashDto(1, 2, 3, 4, "rangeHash"), "contextKey", CleanCodeAttribute.CONVENTIONAL, Map.of(SoftwareQuality.MAINTAINABILITY, ImpactSeverity.MEDIUM),
            true))))));
    }
  }

  @Nested
  class WhenReceivingTaintClosedEvent {
    @Test
    void it_should_remove_taint_vulnerability_from_storage() {
      server = newSonarQubeServer("10.0")
        .withProject("projectKey",
          project -> project.withBranch("branchName"))
        .start();
      mockEvent(server, "projectKey", "event: TaintVulnerabilityClosed\n" +
        "data: {" +
        "\"projectKey\": \"projectKey\"," +
        "\"key\": \"key1\"" +
        "}\n\n");
      backend = newBackend()
        .withExtraEnabledLanguagesInConnectedMode(JAVA)
        .withServerSentEventsEnabled()
        .withSonarQubeConnection("connectionId", server,
          storage -> storage.withProject("projectKey",
            project -> project.withMainBranch("branchName", branch -> branch.withTaintIssue(aServerTaintIssue("key1").withType(RuleType.VULNERABILITY)))))
        .withBoundConfigScope("configScope", "connectionId", "projectKey")
        .build();

      await().atMost(Duration.ofSeconds(2)).untilAsserted(() -> assertThat(readTaintVulnerabilities("connectionId", "projectKey", "branchName"))
        .isEmpty());
    }

    @Test
    void it_should_notify_client() {
      server = newSonarQubeServer("10.0")
        .withProject("projectKey",
          project -> project.withBranch("branchName"))
        .start();
      mockEvent(server, "projectKey", "event: TaintVulnerabilityClosed\n" +
        "data: {" +
        "\"projectKey\": \"projectKey\"," +
        "\"key\": \"key1\"" +
        "}\n\n");
      var client = newFakeClient().build();
      backend = newBackend()
        .withExtraEnabledLanguagesInConnectedMode(JAVA)
        .withServerSentEventsEnabled()
        .withSonarQubeConnection("connectionId", server,
          storage -> storage.withProject("projectKey",
            project -> project.withMainBranch("branchName", branch -> branch.withTaintIssue(aServerTaintIssue("key1").withType(RuleType.VULNERABILITY)))))
        .withBoundConfigScope("configScope", "connectionId", "projectKey")
        .build(client);
      var storedTaintIssues = await().atMost(Duration.ofSeconds(2)).until(() -> readTaintVulnerabilities("connectionId", "projectKey", "branchName"), taints -> taints.size() == 1);

      await().atMost(Duration.ofSeconds(2)).untilAsserted(() -> assertThat(client.getTaintVulnerabilityChanges())
        .usingRecursiveComparison()
        .isEqualTo(List.of(new DidChangeTaintVulnerabilitiesParams("configScope", Set.of(storedTaintIssues.get(0).getId()), List.of(), List.of()))));
    }
  }

  @Nested
  class WhenChangingIssueStatus {
    @Test
    void it_should_notify_client() {
      server = newSonarQubeServer("10.0")
        .withProject("projectKey",
          project -> project.withBranch("branchName"))
        .start();
      mockEvent(server, "projectKey", "event: TaintVulnerabilityClosed\n" +
        "data: {" +
        "\"projectKey\": \"projectKey\"," +
        "\"key\": \"key1\"" +
        "}\n\n");
      var client = newFakeClient().build();
      var introductionDate = Instant.now().truncatedTo(ChronoUnit.SECONDS);
      backend = newBackend()
        .withExtraEnabledLanguagesInConnectedMode(JAVA)
        .withServerSentEventsEnabled()
        .withSonarQubeConnection("connectionId", server,
          storage -> storage.withProject("projectKey",
            project -> project.withMainBranch("branchName",
              branch -> branch.withTaintIssue(aServerTaintIssue("key1").withIntroductionDate(introductionDate).withType(RuleType.VULNERABILITY)))))
        .withBoundConfigScope("configScope", "connectionId", "projectKey")
        .withFullSynchronization()
        .build(client);
      var storedTaintIssues = await().atMost(Duration.ofSeconds(2)).until(() -> readTaintVulnerabilities("connectionId", "projectKey", "branchName"), taints -> taints.size() == 1);

      backend.getIssueService().changeStatus(new ChangeIssueStatusParams("configScope", "key1", ResolutionStatus.WONT_FIX, true));

      await().atMost(Duration.ofSeconds(2)).untilAsserted(() -> assertThat(client.getTaintVulnerabilityChanges())
        .usingRecursiveFieldByFieldElementComparatorIgnoringFields("addedTaintVulnerabilities.id")
        .contains(new DidChangeTaintVulnerabilitiesParams("configScope", Set.of(), List.of(),
          List.of(new TaintVulnerabilityDto(storedTaintIssues.get(0).getId(), "key1", true, "ruleKey", "message", Paths.get("file/path"), introductionDate,
            org.sonarsource.sonarlint.core.rpc.protocol.common.IssueSeverity.MINOR, org.sonarsource.sonarlint.core.rpc.protocol.common.RuleType.VULNERABILITY, List.of(),
            new TextRangeWithHashDto(1, 2, 3, 4, "rangeHash"), "contextKey", CleanCodeAttribute.CONVENTIONAL, Map.of(SoftwareQuality.MAINTAINABILITY, ImpactSeverity.MEDIUM),
            true)))));
    }
  }

  private List<ServerTaintIssue> readTaintVulnerabilities(String connectionId, String projectKey, String branchName) {
    return backend.getIssueStorageService().connection(connectionId).project(projectKey).findings().loadTaint(branchName);
  }

  private static void mockEvent(ServerFixture.Server server, String projectKey, String eventPayload) {
    server.getMockServer().stubFor(get("/api/push/sonarlint_events?projectKeys=" + projectKey + "&languages=java")
      .inScenario("Single event")
      .whenScenarioStateIs(STARTED)
      .willReturn(okForContentType("text/event-stream", eventPayload).withFixedDelay(1000))
      .willSetStateTo("Event delivered"));
    // avoid later reconnection
    server.getMockServer().stubFor(get("/api/push/sonarlint_events?projectKeys=" + projectKey + "&languages=java")
      .inScenario("Single event")
      .whenScenarioStateIs("Event delivered")
      .willReturn(notFound()));
  }
}
