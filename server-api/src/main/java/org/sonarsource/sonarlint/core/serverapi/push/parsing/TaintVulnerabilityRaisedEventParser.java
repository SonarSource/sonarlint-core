/*
 * SonarLint Core - Server API
 * Copyright (C) 2016-2023 SonarSource SA
 * mailto:info AT sonarsource DOT com
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
package org.sonarsource.sonarlint.core.serverapi.push.parsing;

import com.google.gson.Gson;
import java.time.Instant;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;
import javax.annotation.Nullable;
import org.sonarsource.sonarlint.core.commons.IssueSeverity;
import org.sonarsource.sonarlint.core.commons.RuleType;
import org.sonarsource.sonarlint.core.commons.log.SonarLintLogger;
import org.sonarsource.sonarlint.core.serverapi.push.TaintVulnerabilityRaisedEvent;
import org.sonarsource.sonarlint.core.serverapi.push.parsing.common.LocationPayload;

import static java.util.Objects.isNull;
import static org.sonarsource.sonarlint.core.serverapi.util.ServerApiUtils.isBlank;

public class TaintVulnerabilityRaisedEventParser implements EventParser<TaintVulnerabilityRaisedEvent> {
  private static final SonarLintLogger LOG = SonarLintLogger.get();

  private final Gson gson = new Gson();

  @Override
  public Optional<TaintVulnerabilityRaisedEvent> parse(String jsonData) {
    var payload = gson.fromJson(jsonData, TaintVulnerabilityRaisedEventPayload.class);
    if (payload.isInvalid()) {
      LOG.error("Invalid payload for 'TaintVulnerabilityRaised' event: {}", jsonData);
      return Optional.empty();
    }
    return Optional.of(new TaintVulnerabilityRaisedEvent(
      payload.key,
      payload.projectKey,
      payload.branch,
      Instant.ofEpochMilli(payload.creationDate),
      payload.ruleKey,
      IssueSeverity.valueOf(payload.severity),
      RuleType.valueOf(payload.type),
      adapt(payload.mainLocation),
      adapt(payload.flows),
      payload.ruleDescriptionContextKey));
  }

  private static List<TaintVulnerabilityRaisedEvent.Flow> adapt(List<TaintVulnerabilityRaisedEventPayload.FlowPayload> flows) {
    return flows.stream()
      .map(f -> new TaintVulnerabilityRaisedEvent.Flow(
        f.locations.stream()
          .map(TaintVulnerabilityRaisedEventParser::adapt)
          .collect(Collectors.toList())))
      .collect(Collectors.toList());
  }

  public static TaintVulnerabilityRaisedEvent.Location adapt(LocationPayload payload) {
    return new TaintVulnerabilityRaisedEvent.Location(payload.getFilePath(), payload.getMessage(), adapt(payload.getTextRange()));
  }

  private static TaintVulnerabilityRaisedEvent.Location.TextRange adapt(LocationPayload.TextRangePayload payload) {
    return new TaintVulnerabilityRaisedEvent.Location.TextRange(payload.getStartLine(), payload.getStartLineOffset(),
      payload.getEndLine(), payload.getEndLineOffset(), payload.getHash());
  }

  private static class TaintVulnerabilityRaisedEventPayload {
    private String key;
    private String projectKey;
    private String branch;
    private long creationDate;
    private String ruleKey;
    private String severity;
    private String type;
    private LocationPayload mainLocation;
    private List<FlowPayload> flows;

    @Nullable
    private String ruleDescriptionContextKey;

    private boolean isInvalid() {
      return isBlank(key) || isBlank(projectKey) || isBlank(branch) || creationDate == 0L || isBlank(ruleKey) || isBlank(severity) || isBlank(type) ||
        isNull(mainLocation) || mainLocation.isInvalid() || isNull(flows) || flows.stream().anyMatch(FlowPayload::isInvalid);
    }

    private static class FlowPayload {
      private List<LocationPayload> locations;

      private boolean isInvalid() {
        return isNull(locations) || locations.stream().anyMatch(LocationPayload::isInvalid);
      }
    }
  }
}
