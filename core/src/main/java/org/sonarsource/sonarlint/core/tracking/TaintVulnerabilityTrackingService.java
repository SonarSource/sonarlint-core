/*
 * SonarLint Core - Implementation
 * Copyright (C) 2016-2023 SonarSource SA
 * mailto:info AT sonarsource DOT com
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
package org.sonarsource.sonarlint.core.tracking;

import java.util.List;
import java.util.stream.Collectors;
import javax.annotation.Nullable;
import org.sonarsource.sonarlint.core.commons.TextRangeWithHash;
import org.sonarsource.sonarlint.core.event.SonarServerEventReceivedEvent;
import org.sonarsource.sonarlint.core.rpc.protocol.SonarLintRpcClient;
import org.sonarsource.sonarlint.core.rpc.protocol.client.event.DidReceiveServerTaintVulnerabilityChangedOrClosedEvent;
import org.sonarsource.sonarlint.core.rpc.protocol.client.event.DidReceiveServerTaintVulnerabilityRaisedEvent;
import org.sonarsource.sonarlint.core.serverapi.push.IssueChangedEvent;
import org.sonarsource.sonarlint.core.serverapi.push.TaintVulnerabilityClosedEvent;
import org.sonarsource.sonarlint.core.serverapi.push.TaintVulnerabilityRaisedEvent;
import org.sonarsource.sonarlint.core.serverconnection.issues.ServerTaintIssue;
import org.sonarsource.sonarlint.core.storage.StorageService;
import org.springframework.context.event.EventListener;

public class TaintVulnerabilityTrackingService {
  private final SonarLintRpcClient client;
  private final StorageService storageService;

  public TaintVulnerabilityTrackingService(SonarLintRpcClient client, StorageService storageService) {
    this.client = client;
    this.storageService = storageService;
  }

  @EventListener
  public void onServerEventReceived(SonarServerEventReceivedEvent eventReceived) {
    var connectionId = eventReceived.getConnectionId();
    var serverEvent = eventReceived.getEvent();
    if (serverEvent instanceof TaintVulnerabilityRaisedEvent) {
      updateStorageAndNotifyClient(connectionId, (TaintVulnerabilityRaisedEvent) serverEvent);
    } else if (serverEvent instanceof TaintVulnerabilityClosedEvent) {
      updateStorageAndNotifyClient(connectionId, (TaintVulnerabilityClosedEvent) serverEvent);
    } else if ((serverEvent instanceof IssueChangedEvent)) {
      tryUpdateStorageAndNotifyClient(connectionId, (IssueChangedEvent) serverEvent);
    }
  }

  private void updateStorageAndNotifyClient(String connectionId, TaintVulnerabilityRaisedEvent event) {
    var newTaintVulnerability = new ServerTaintIssue(
      event.getKey(),
      false,
      event.getRuleKey(),
      event.getMainLocation().getMessage(),
      event.getMainLocation().getFilePath(),
      event.getCreationDate(),
      event.getSeverity(),
      event.getType(),
      adapt(event.getMainLocation().getTextRange()),
      event.getRuleDescriptionContextKey(),
      event.getCleanCodeAttribute().orElse(null),
      event.getImpacts())
        .setFlows(adapt(event.getFlows()));
    client.didReceiveServerTaintVulnerabilityRaisedEvent(
      new DidReceiveServerTaintVulnerabilityRaisedEvent(connectionId, event.getProjectKey(), newTaintVulnerability.getFilePath(), event.getBranchName(), event.getKey()));
    var projectKey = event.getProjectKey();
    storageService.connection(connectionId).project(projectKey).findings().insert(event.getBranchName(), newTaintVulnerability);
  }

  private void updateStorageAndNotifyClient(String connectionId, TaintVulnerabilityClosedEvent event) {
    var projectKey = event.getProjectKey();
    storageService.connection(connectionId).project(projectKey).findings().deleteTaintIssue(event.getTaintIssueKey());
    client.didReceiveServerTaintVulnerabilityChangedOrClosedEvent(new DidReceiveServerTaintVulnerabilityChangedOrClosedEvent(connectionId, projectKey));
  }

  private void tryUpdateStorageAndNotifyClient(String connectionId, IssueChangedEvent event) {
    var projectKey = event.getProjectKey();
    updateTaintIssues(connectionId, projectKey, event.getUserSeverity(), event.getUserType(), event.getResolved(), event.getImpactedIssueKeys());
    client.didReceiveServerTaintVulnerabilityChangedOrClosedEvent(new DidReceiveServerTaintVulnerabilityChangedOrClosedEvent(connectionId, projectKey));
  }

  private void updateTaintIssues(String connectionId, String projectKey, @Nullable org.sonarsource.sonarlint.core.commons.IssueSeverity userSeverity,
    @Nullable org.sonarsource.sonarlint.core.commons.RuleType userType, @Nullable Boolean resolved, List<String> issueKeys) {
    var findingsStorage = storageService.connection(connectionId).project(projectKey).findings();
    issueKeys.forEach(issueKey -> findingsStorage.updateTaintIssue(issueKey, issue -> {
      if (userSeverity != null) {
        issue.setSeverity(userSeverity);
      }
      if (userType != null) {
        issue.setType(userType);
      }
      if (resolved != null) {
        issue.setResolved(resolved);
      }
    }));
  }

  private static List<ServerTaintIssue.Flow> adapt(List<TaintVulnerabilityRaisedEvent.Flow> flows) {
    return flows.stream().map(TaintVulnerabilityTrackingService::adapt).collect(Collectors.toList());
  }

  private static ServerTaintIssue.Flow adapt(TaintVulnerabilityRaisedEvent.Flow flow) {
    return new ServerTaintIssue.Flow(flow.getLocations().stream().map(TaintVulnerabilityTrackingService::adapt).collect(Collectors.toList()));
  }

  private static ServerTaintIssue.ServerIssueLocation adapt(TaintVulnerabilityRaisedEvent.Location location) {
    return new ServerTaintIssue.ServerIssueLocation(
      location.getFilePath(),
      adapt(location.getTextRange()),
      location.getMessage());
  }

  public static TextRangeWithHash adapt(TaintVulnerabilityRaisedEvent.Location.TextRange range) {
    return new TextRangeWithHash(range.getStartLine(), range.getStartLineOffset(), range.getEndLine(), range.getEndLineOffset(), range.getHash());
  }
}
